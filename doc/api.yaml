openapi: 3.0.4
info:
  title: WASAText API
  description: Professional API for the functionalities of the WASAText messaging app
  version: 1.0.0

servers:
  - url: http://localhost:8080/

components:
  responses:
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not found

    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized

    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid input

  schemas:
    User:
      type: object
      required: [username]
      properties:
        username:
          type: string
          example: johndoe
        displayName:
          type: string
          example: John Doe
        profilePicture:
          type: string
          format: uri
          example: https://example.com/avatar.jpg

    Reaction:
      type: object
      required: [user, emoji]
      properties:
        emoji:
          type: string
          example: ðŸ˜„
        user:
          $ref: '#/components/schemas/User'

    Message:
      type: object
      required: [id, sender, timestamp, content, mediaType, isForwarded]
      properties:
        id:
          type: integer
          example: 789
        content:
          type: string
          example: Hello!
        isForwarded:
          type: boolean
          example: true
        mediaType:
          type: string
          enum: [text, photo]
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        sender:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [sent, received, read]
        timestamp:
          type: string
          format: date-time
          example: 2025-05-30T14:48:00+00:00

    Conversation:
      type: object
      required: [id, participants]
      properties:
        id:
          type: integer
          example: 123
        lastMessage:
          $ref: '#/components/schemas/Message'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Group:
      type: object
      required: [id, name, members]
      properties:
        id:
          type: integer
          example: 456
        name:
          type: string
          example: Friends Group
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'

paths:
  /session:
    post:
      summary: Logs in the user
      operationId: seesimplifiedlogin
      tags: [login]
      requestBody:
        required: true
        description: User details
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 16
                  example: Maria
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: abcdef012345

  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, displayName, profilePicture]
              properties:
                username:
                  type: string
                displayName:
                  type: string
                profilePicture:
                  type: string
                  format: uri
      responses:
        '201':
          description: User created successfully
    get:
      summary: List all users (debug)
      operationId: listUsers
      tags: [user]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{username}:
    patch:
      summary: Update display name
      operationId: setMyUserName
      tags: [user]
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newName]
              properties:
                newName:
                  type: string
      responses:
        '200':
          description: Name updated successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
    get:
      summary: Get a user by username
      operationId: getUser
      tags: [user]
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{username}/photo:
    patch:
      summary: Update user profile picture
      operationId: setMyPhoto
      tags: [user]
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [photoUrl]
              properties:
                photoUrl:
                  type: string
                  format: uri
      responses:
        '200':
          description: Profile picture updated

  /conversations:
    get:
      summary: List all conversations
      operationId: getMyConversations
      tags: [conversation]
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'

  /conversations/{id}/messages:
    get:
      summary: Get messages of a conversation
      operationId: getConversation
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Messages fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

    post:
      summary: Send a new message
      operationId: sendMessage
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content, mediaType]
              properties:
                content:
                  type: string
                mediaType:
                  type: string
                  enum: [text, photo]
      responses:
        '201':
          description: Message sent

  /conversations/{id}/messages/{messageId}:
    delete:
      summary: Delete a message
      operationId: deleteMessage
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: messageId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Message deleted

  /conversations/{id}/messages/{messageId}/forward:
    post:
      summary: Forward a message to another conversation
      operationId: forwardMessage
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: messageId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [targetConversationId]
              properties:
                targetConversationId:
                  type: integer
      responses:
        '200':
          description: Message forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /conversations/{id}/messages/{messageId}/reactions:
    post:
      summary: Add a reaction
      operationId: commentMessage
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: messageId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [emoji]
              properties:
                emoji:
                  type: string
      responses:
        '200':
          description: Reaction added

    delete:
      summary: Remove a reaction
      operationId: uncommentMessage
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: messageId
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Reaction removed

  /groups:
    post:
      summary: Create group
      operationId: addToGroup
      tags: [group]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, members]
              properties:
                name:
                  type: string
                members:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Group created
    
    get:
      summary: List all groups (debug)
      operationId: listGroups
      tags: [group]
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

  /groups/{id}/members:
    delete:
      summary: Leave group
      operationId: leaveGroup
      tags: [group]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Left the group

  /groups/{id}/name:
    patch:
      summary: Set group name
      operationId: setGroupName
      tags: [group]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Name changed

  /groups/{id}/photo:
    patch:
      summary: Set group photo
      operationId: setGroupPhoto
      tags: [group]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [photoUrl]
              properties:
                photoUrl:
                  type: string
                  format: uri
      responses:
        '200':
          description: Photo updated
